// Copyright 2005, Google Inc.                                             
// All rights reserved.                                                    
//                                                                         
// Redistribution and use in source and binary forms, with or without      
// modification, are permitted provided that the following conditions are  
// met:                                                                    
//                                                                         
//     * Redistributions of source code must retain the above copyright    
// notice, this list of conditions and the following disclaimer.           
//     * Redistributions in binary form must reproduce the above           
// copyright notice, this list of conditions and the following disclaimer  
// in the documentation and/or other materials provided with the           
// distribution.                                                           
//     * Neither the name of Google Inc. nor the names of its              
// contributors may be used to endorse or promote products derived from    
// this software without specific prior written permission.                
//                                                                         
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS     
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR   
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT    
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT        
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
                                                                           
#include <gtest/gtest.h>                                                   
#include "../main.h"                                                 


#define FLOAT32_MULTIPLY(TEST_NAME, x, y, z)                \
    TEST(Multiplication, TEST_NAME){                        \
        Float32 a, b, c;                                    \
        a.fword = x;                                        \
        b.fword = y;                                        \
        c = float32_multiply(a, b);                         \
        ASSERT_FLOAT_EQ(z, c.fword);                        \
    }                                                         


// PositiveNumbers_Small Test Cases
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_000, 57.40924454, 9.86326313, 566.24249268);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_001, 55.73287201, 67.62984467, 3769.20556641);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_002, 18.24014473, 94.12904358, 1716.92736816);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_003, 67.64865112, 74.04281616, 5008.89648438);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_004, 35.49781418, 58.07325363, 2061.47363281);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_005, 49.81618881, 16.27264977, 810.64141846);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_006, 7.08364201, 90.42989349, 640.57299805);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_007, 80.94245148, 75.20748138, 6087.47802734);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_008, 37.26721573, 51.94754410, 1935.94030762);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_009, 5.84059620, 17.63999367, 103.02807617);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_010, 74.30802155, 29.83012009, 2216.61718750);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_011, 63.59776688, 32.75410843, 2083.08813477);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_012, 85.54374695, 85.03560638, 7274.26416016);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_013, 87.27635193, 21.17943954, 1848.46423340);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_014, 59.21952820, 56.65501022, 3355.08300781);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_015, 98.47447205, 94.24559784, 9280.78515625);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_016, 67.98975372, 48.93233109, 3326.89721680);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_017, 26.15751076, 42.05192184, 1099.97363281);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_018, 36.85328674, 16.64188385, 613.30810547);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Small_019, 22.25258827, 58.92495728, 1311.23278809);


// NegativeNumbers_Small Test Cases
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_000, -53.68401718, -30.91095734, 1659.42431641);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_001, -21.10546875, 40.85247803, -862.21069336);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_002, -40.45857620, 56.33825684, -2279.36572266);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_003, 60.84324646, -4.02729797, -245.03388977);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_004, -79.12558746, 56.14089966, -4442.18164062);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_005, -88.11914062, -88.57788849, 7805.40722656);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_006, 5.23816681, 28.16899109, 147.55387878);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_007, 74.91419983, -58.25892258, -4364.42041016);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_008, -39.42006683, 22.38786316, -882.53106689);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_009, 28.98152161, 79.59890747, 2306.89746094);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_010, -17.86473846, -56.69821548, 1012.89880371);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_011, 81.49473572, 81.63352966, 6652.70312500);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_012, -66.75164795, 36.72523499, -2451.46997070);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_013, 19.68444824, 14.67575073, 288.88406372);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_014, -13.91242981, -24.40666199, 339.55596924);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_015, 73.56874084, 37.37388611, 2749.54980469);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_016, -58.23945618, -57.95137405, 3375.05639648);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_017, 91.33145142, -39.63199234, -3619.64746094);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_018, -22.04258728, -38.82477188, 855.79840088);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Small_019, 42.66313171, 36.36399841, 1551.40209961);


// PositiveNumbers_Medium Test Cases
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_000, 3646.32495117, 4136.13671875, 15081699.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_001, 1937.37963867, 2684.05590820, 5200035.50000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_002, 3531.58374023, 2893.31079102, 10217969.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_003, 2196.87792969, 2153.35351562, 4730655.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_004, 1517.16308594, 519.30743408, 787874.06250000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_005, 2851.41528320, 4017.48461914, 11455517.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_006, 4466.79248047, 1221.92065430, 5458066.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_007, 1433.95727539, 4279.97216797, 6137297.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_008, 2344.33886719, 4995.16455078, 11710358.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_009, 2874.67602539, 1215.46350098, 3494063.75000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_010, 4599.37255859, 3639.69775391, 16740326.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_011, 2098.74853516, 4220.23095703, 8857204.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_012, 4089.23925781, 2336.44384766, 9554278.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_013, 3253.99291992, 3443.30908203, 11204503.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_014, 4965.03662109, 3338.02099609, 16573396.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_015, 842.48559570, 4676.99169922, 3940298.25000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_016, 1795.10559082, 1825.22717285, 3276475.50000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_017, 3171.81567383, 2587.34692383, 8206587.50000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_018, 2286.63964844, 4600.35449219, 10519353.00000000);
FLOAT32_MULTIPLY(TC_PositiveNumbers_Medium_019, 2723.89794922, 3098.82958984, 8440896.00000000);


// NegativeNumbers_Medium Test Cases
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_000, 511.60253906, 4671.03710938, 2389714.50000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_001, 3516.13378906, 2538.51367188, 8925754.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_002, 2010.76611328, 4876.50683594, 9805515.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_003, -3498.51416016, -1378.82104492, 4823825.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_004, -4065.28637695, 2328.39111328, -9465577.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_005, 2759.80712891, 1483.25781250, 4093505.50000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_006, -3172.24951172, 384.48388672, -1219678.87500000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_007, 4574.97558594, -4607.42138672, -21078840.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_008, 4584.74121094, -538.94677734, -2470931.50000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_009, -331.82226562, -3419.97509766, 1134823.87500000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_010, 2810.11425781, 875.96289062, 2461555.75000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_011, 2387.96435547, -2076.71630859, -4959124.50000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_012, 168.85498047, 3941.69140625, 665574.25000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_013, -4508.01562500, 4151.39843750, -18714570.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_014, -4796.52392578, 2566.22509766, -12308960.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_015, 1812.88183594, 810.49023438, 1469323.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_016, -4534.02490234, -4466.45019531, 20250996.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_017, -1247.25927734, -2784.96020508, 3473567.50000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_018, -1468.05493164, -3013.86279297, 4424516.00000000);
FLOAT32_MULTIPLY(TC_NegativeNumbers_Medium_019, -4273.89062500, 2578.56494141, -11020505.00000000);
